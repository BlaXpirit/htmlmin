#!/usr/bin/env python

import argparse
import codecs

import htmlmin

parser = argparse.ArgumentParser(description='Minify HTML')
parser.add_argument('input_file',
  metavar='INPUT',
  help='File path to html file to minify.',
  )
parser.add_argument('output_file',
  nargs='?',
  metavar='OUTPUT',
  help="File path to output to. Defaults to stdout.",
  )
parser.add_argument('-c', '--remove-comments',
  help=("When set, comments will be removed. They can be kept on an "
        "individual basis by starting them with a '!': <!--! comment -->. The "
        "'!' will be removed from the final output. If you want a '!' as the "
        "leading character of your comment, put two of them: "
        "<!--!! comment -->."),
  action='store_true')
parser.add_argument('-e', '--remove-empty-space',
  help=("When set, this removed empty space betwen tags. WARNING: this can "
        "cause unintended consequences. For instance, '<i>X</i> <i>Y</i>' will "
        "become '<i>X</i><i>Y</i>'. Putting whitespace along with other text "
        "will avoid this problem. Only use if you are confident."),
  action='store_true')
parser.add_argument('-H', '--in-head',
  help=("If you are parsing only a fragment of HTML, and the fragment occurs "
        "in the head of the document, setting this will remove some extra "
        "whitespace."),
  action='store_true')
parser.add_argument('-k', '--keep-pre-attr',
  help=("HTMLMin supports the propietary attribute 'pre' that can be added "
        "to elements to prevent minification. This attribute is removed by "
        "default. Set this flag to keep the 'pre' attributes in place."),
  action='store_true')
parser.add_argument('-p', '--pre-tags',
  metavar='TAG',
  help=("By default, the contents of 'pre', and 'textarea' tags are left "
        "unminified. You can specify different tags using the --pre-tags "
        "option. 'script' and 'style' tags are always left unmininfied."),
  nargs='*',
  default=['pre', 'textarea'])

if __name__ == '__main__':
  args = parser.parse_args()
  inp = open(args.input_file).read()
  result = htmlmin.minify(inp,
    remove_comments=args.remove_comments,
    remove_empty_space=args.remove_empty_space,
    in_head=args.in_head,
    pre_tags=args.pre_tags,
    keep_pre=args.keep_pre_attr,
    )
  if args.output_file:
    codecs.open(args.output_file, 'w', encoding='utf-8').write(result)
  else:
    print result